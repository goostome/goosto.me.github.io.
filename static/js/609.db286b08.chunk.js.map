{"version":3,"file":"static/js/609.db286b08.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<any>`\r\n  background: ${(p) => p.color || \"#2e186a\"};\r\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(255, 130, 92);\r\n    background-color: rgb(255, 130, 92);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({\r\n  color,\r\n  fixedWidth,\r\n  children,\r\n  onClick,\r\n}: ButtonProps) => (\r\n  <StyledButton color={color} fixedWidth={fixedWidth} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","fixedWidth","children","onClick","_jsx","useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","title","content","t","_jsxs","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","autoComplete","onSubmit","span","Input","TextArea"],"sourceRoot":""}